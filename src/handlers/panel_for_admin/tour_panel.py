import asyncio

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.database.models import DbTour
from src.utils.keyboard.user import start_panel_kb
from src.utils.keyboard.admin import tour_panel_kb, admin_panel_kb
from src.utils.filter import AdminRoleFilter
from src.states.admin import AddTourState, DeleteTourState

router = Router()


@router.message(F.text == "–†–∞–±–æ—Ç–∞ —Å —Ç—É—Ä–∞–º–∏", AdminRoleFilter())
async def show_tour_menu(message: types.Message):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—É—Ä–∞–º–∏. """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=tour_panel_kb)
    await message.delete()


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä", AdminRoleFilter())
async def start_adding_tour(message: types.Message, state: FSMContext):
    """ –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞. """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–∞:")
    await state.set_state(AddTourState.waiting_for_tour_name)
    await message.delete()


@router.message(AddTourState.waiting_for_tour_name)
async def receive_tour_name(message: types.Message, state: FSMContext):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–∞. """
    await state.update_data(tour_name=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–∞:")
    await state.set_state(AddTourState.waiting_for_tour_description)


@router.message(AddTourState.waiting_for_tour_description)
async def receive_tour_description(message: types.Message, state: FSMContext):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ –ë–î. """
    state_data = await state.get_data()
    tour_name = state_data.get("tour_name")
    tour_description = message.text.strip()

    success = await DbTour.add_tour(name=tour_name, description=tour_description)
    if success:
        await message.answer(f"‚úÖ –¢—É—Ä \"{tour_name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        await message.answer(f"‚ö†Ô∏è –¢—É—Ä —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    await state.clear()


@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç—É—Ä—ã", AdminRoleFilter())
async def show_all_tours(message: types.Message):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. """
    tours = await DbTour.get_all_tours()
    if not tours:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–æ–≤.")
        return

    builder = InlineKeyboardBuilder()
    for tour in tours:
        builder.row(InlineKeyboardButton(text=tour.name, callback_data=f"view_tour_{tour.id}"))

    await message.answer("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤:", reply_markup=builder.as_markup())
    await message.delete()


@router.callback_query(F.data.startswith("view_tour_"))
async def view_tour(callback_query: types.CallbackQuery):
    """ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. """
    tour_id = int(callback_query.data.replace("view_tour_", ""))
    
    tour = await DbTour.get_tour(tour_id)
    
    if tour:
        await callback_query.message.answer(
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞: {tour.name}\n"
            f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {tour.description}"
        )
    else:
        await callback_query.message.answer("‚ö†Ô∏è –¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä", AdminRoleFilter())
async def start_deleting_tour(message: types.Message):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º. """
    tours = await DbTour.get_all_tours()
    if not tours:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–æ–≤.")
        return
    await message.delete()
    # –°–æ–∑–¥–∞–µ–º Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=tour.name, callback_data=f"delete_tour_{tour.id}")]
            for tour in tours
        ]
    )

    warning_message = await message.answer(
        "–í–Ω–∏–º–∞–Ω–∏–µ!\n"
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π \"–¢—É—Ä—ã\", –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - —É–¥–∞–ª–∏—Ç –∑–∞–ø–∏—Å—å!\n"
        "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø–∏—Å—è–º–∏ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        reply_markup=keyboard
    )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(20)
    await warning_message.delete()


@router.callback_query(F.data.startswith("delete_tour_"))
async def delete_tour(callback_query: types.CallbackQuery):
    """ –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç—É—Ä. """
    tour_id = int(callback_query.data.replace("delete_tour_", ""))
    success = await DbTour.delete_tour(tour_id)

    if success:
        await callback_query.message.answer("‚úÖ –¢—É—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    else:
        await callback_query.message.answer("‚ö†Ô∏è –¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤
    await start_deleting_tour(callback_query.message)


@router.message(F.text == "–ù–∞–∑–∞–¥", AdminRoleFilter())
async def back_to_main_menu(message: types.Message):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. """
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_panel_kb)
    await message.delete()