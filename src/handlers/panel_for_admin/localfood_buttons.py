from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.utils.filter import AdminRoleFilter
from src.database.models import DbLocalFood
from src.utils.keyboard.admin import localfood_panel_kb, admin_panel_kb
from src.states.admin import AddLocalFoodState

router = Router()


@router.message(F.text == "–†–∞–±–æ—Ç–∞ —Å –∫—É—Ö–Ω–µ–π", AdminRoleFilter())
async def show_localfood_menu(message: types.Message):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Å—Ç–Ω–æ–π –∫—É—Ö–Ω–µ–π. """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=localfood_panel_kb)
    await message.delete()


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", AdminRoleFilter())
async def start_adding_localfood(message: types.Message, state: FSMContext):
    """ –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞. """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª—é–¥–∞:")
    await state.set_state(AddLocalFoodState.waiting_for_localfood_name)
    await message.delete()


@router.message(AddLocalFoodState.waiting_for_localfood_name)
async def receive_localfood_name(message: types.Message, state: FSMContext):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞. """
    await state.update_data(localfood_name=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞:")
    await state.set_state(AddLocalFoodState.waiting_for_localfood_description)


@router.message(AddLocalFoodState.waiting_for_localfood_description)
async def receive_localfood_description(message: types.Message, state: FSMContext):
    """ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª—é–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ –ë–î. """
    state_data = await state.get_data()
    localfood_name = state_data.get("localfood_name")
    localfood_description = message.text.strip()

    success = await DbLocalFood.add_local_food(name=localfood_name, description=localfood_description)
    if success:
        await message.answer(f"‚úÖ –ë–ª—é–¥–æ \"{localfood_name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ö†Ô∏è –ë–ª—é–¥–æ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    await state.clear()


@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –±–ª—é–¥–∞", AdminRoleFilter())
async def show_all_localfoods(message: types.Message):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª—é–¥. """
    localfoods = await DbLocalFood.get_all_local_foods()
    if not localfoods:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥.")
        return

    builder = InlineKeyboardBuilder()
    for localfood in localfoods:
        builder.row(InlineKeyboardButton(text=localfood.name, callback_data=f"view_localfood_{localfood.id}"))

    await message.answer("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª—é–¥:", reply_markup=builder.as_markup())
    await message.delete()


@router.callback_query(F.data.startswith("view_localfood_"))
async def view_localfood(callback_query: types.CallbackQuery):
    """ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª—é–¥–∞. """
    localfood_id = int(callback_query.data.replace("view_localfood_", ""))
    localfood = await DbLocalFood.get_local_food(localfood_id)
    
    if localfood:
        await callback_query.message.answer(
            f"üç≤ –ù–∞–∑–≤–∞–Ω–∏–µ: {localfood.name}\n"
            f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {localfood.description}"
        )
    else:
        await callback_query.message.answer("‚ö†Ô∏è –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ", AdminRoleFilter())
async def start_deleting_localfood(message: types.Message):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. """
    localfoods = await DbLocalFood.get_all_local_foods()
    if not localfoods:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª—é–¥.")
        return
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=localfood.name, callback_data=f"delete_localfood_{localfood.id}")]
            for localfood in localfoods
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await message.delete()


@router.callback_query(F.data.startswith("delete_localfood_"))
async def delete_localfood(callback_query: types.CallbackQuery):
    """ –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ. """
    localfood_id = int(callback_query.data.replace("delete_localfood_", ""))
    success = await DbLocalFood.delete_local_food(localfood_id)

    if success:
        await callback_query.message.answer("‚úÖ –ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await callback_query.message.answer("‚ö†Ô∏è –ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await start_deleting_localfood(callback_query.message)


@router.message(F.text == "–ù–∞–∑–∞–¥", AdminRoleFilter())
async def back_to_main_menu(message: types.Message):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. """
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_panel_kb)
    await message.delete()