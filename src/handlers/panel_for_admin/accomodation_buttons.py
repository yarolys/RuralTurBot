import asyncio

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.database.models import DbAccomodation
from src.utils.keyboard.admin import accomodation_panel_kb, admin_panel_kb
from src.utils.filter import AdminRoleFilter
from src.states.admin import AddAccomodationState

router = Router()


@router.message(F.text == "–†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è–º–∏", AdminRoleFilter())
async def show_accomodation_menu(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è–º–∏."""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=accomodation_panel_kb)
    await message.delete()


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ", AdminRoleFilter())
async def start_adding_accomodation(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")
    await state.set_state(AddAccomodationState.waiting_for_accomodation_name)
    await message.delete()


@router.message(AddAccomodationState.waiting_for_accomodation_name)
async def receive_accomodation_name(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è."""
    await state.update_data(accomodation_name=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")
    await state.set_state(AddAccomodationState.waiting_for_accomodation_description)


@router.message(AddAccomodationState.waiting_for_accomodation_description)
async def receive_accomodation_description(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ–≥–æ –≤ –ë–î."""
    state_data = await state.get_data()
    accomodation_name = state_data.get("accomodation_name")
    accomodation_description = message.text.strip()

    success = await DbAccomodation.add_accomodation(name=accomodation_name, description=accomodation_description)
    if success:
        await message.answer(f"‚úÖ –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ \"{accomodation_name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    await state.clear()


@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è", AdminRoleFilter())
async def show_all_accomodation(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–π –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    accomodations = await DbAccomodation.get_all_accomodation()
    if not accomodations:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–π.")
        return

    builder = InlineKeyboardBuilder()
    for accomodation in accomodations:
        builder.row(InlineKeyboardButton(text=accomodation.name, callback_data=f"view_accomodation_{accomodation.id}"))

    await message.answer("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–π:", reply_markup=builder.as_markup())
    await message.delete()


@router.callback_query(F.data.startswith("view_accomodation_"))
async def view_accomodation(callback_query: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è."""
    accomodation_id = int(callback_query.data.replace("view_accomodation_", ""))
    accomodation = await DbAccomodation.get_accomodation(accomodation_id)

    if accomodation:
        await callback_query.message.answer(
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {accomodation.name}\n"
            f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {accomodation.description}"
        )
    else:
        await callback_query.message.answer("‚ö†Ô∏è –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ", AdminRoleFilter())
async def start_deleting_accomodation(message: types.Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º."""
    accomodations = await DbAccomodation.get_all_accomodation()
    if not accomodations:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–π.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=acc.name, callback_data=f"delete_accomodation_{acc.id}")]
            for acc in accomodations
        ]
    )

    warning_message = await message.answer(
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n"
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π \"–ü—Ä–æ–∂–∏–≤–∞–Ω–∏—è\".\n"
        "–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚Äî —É–¥–∞–ª–∏—Ç –∑–∞–ø–∏—Å—å!\n"
        "–°–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥.",
        reply_markup=keyboard
    )

    await asyncio.sleep(20)
    await warning_message.delete()


@router.callback_query(F.data.startswith("delete_accomodation_"))
async def delete_accomodation(callback_query: types.CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ."""
    accomodation_id = int(callback_query.data.replace("delete_accomodation_", ""))
    success = await DbAccomodation.delete_accomodation(accomodation_id)

    if success:
        await callback_query.message.answer("‚úÖ –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await callback_query.message.answer("‚ö†Ô∏è –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    await start_deleting_accomodation(callback_query.message)


@router.message(F.text == "–ù–∞–∑–∞–¥", AdminRoleFilter())
async def back_to_main_menu(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."""
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_panel_kb)
    await message.delete()
