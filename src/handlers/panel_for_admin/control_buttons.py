from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.database.models import DbEditableText
from src.utils.keyboard.user import start_panel_kb
from src.utils.filter import AdminRoleFilter
from src.states.admin import EditTextState

router = Router()



@router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏", AdminRoleFilter())
async def show_texts_menu(message: types.Message):
    button_ids = ['about_us', 'get_discount', 'contacts', 'accommodation', 'entertainment', 'local_food', 'excursions']
    for identifier in button_ids:
        editable_text = await DbEditableText.get_text(identifier)
        if not editable_text:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –ø—É—Å—Ç—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            await DbEditableText.update_text(identifier, "")

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=start_panel_kb
    )

@router.callback_query(F.data.in_(['about_us', 'get_discount', 'contacts', 'accommodation', 'entertainment', 'local_food', 'excursions']))
async def start_editing_button_text(callback_query: types.CallbackQuery, state: FSMContext):
    identifier = callback_query.data

    editable_text = await DbEditableText.get_text(identifier)
    if not editable_text:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.answer("–¢–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω.")
        return
    
    await callback_query.message.answer(
        f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n"
        f"–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏: *{identifier}*\n\n"
        f"–°—Ç–∞—Ä—ã–π —Ç–µ–∫—Å—Ç:\n\n"
        f"_{editable_text.content}_\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∞'.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_editing")]]
        ),
        parse_mode="Markdown"
    )

    await state.set_state(EditTextState.waiting_for_new_text)
    await state.update_data(identifier=identifier)


@router.message(EditTextState.waiting_for_new_text)
async def update_button_text(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    identifier = state_data.get("identifier")
    new_text = message.text.strip()

    if not new_text:
        await message.answer("‚ö†Ô∏è –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await DbEditableText.update_text(identifier, new_text)
    await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ {identifier} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!", parse_mode="Markdown")
    await state.clear()


@router.callback_query(F.data == "cancel_editing")
async def cancel_editing(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "üö´ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=start_panel_kb  
    )
    await state.clear()