import asyncio
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.database.models import DbEntertainment  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥–µ–ª—å –ë–î
from src.utils.keyboard.admin import entertainment_panel_kb, admin_panel_kb
from src.states.admin import AddEntertainmentState

router = Router()


@router.message(F.text == "–†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è–º–∏")
async def show_entertainment_menu(message: types.Message):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è–º–∏. """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=entertainment_panel_kb)
    await message.delete()


@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è")
async def show_all_entertainments(message: types.Message):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π. """
    entertainments = await DbEntertainment.get_all_entertainment()
    if not entertainments:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π.")
        return

    builder = InlineKeyboardBuilder()
    for entertainment in entertainments:
        builder.row(InlineKeyboardButton(text=entertainment.name, callback_data=f"view_entertainment_{entertainment.id}"))

    await message.answer("üé° –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π:", reply_markup=builder.as_markup())
    await message.delete()


@router.callback_query(F.data.startswith("view_entertainment_"))
async def view_entertainment(callback_query: types.CallbackQuery):
    """ –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–∏. """
    entertainment_id = int(callback_query.data.replace("view_entertainment_", ""))
    entertainment = await DbEntertainment.get_entertainment(entertainment_id)

    if entertainment:
        await callback_query.message.answer(
            f"üé° –ù–∞–∑–≤–∞–Ω–∏–µ: {entertainment.name}\n"
            f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {entertainment.description}"
        )
    else:
        await callback_query.message.answer("‚ö†Ô∏è –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ")
async def start_adding_entertainment(message: types.Message, state: FSMContext):
    """ –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:")
    await state.set_state(AddEntertainmentState.waiting_for_entertainment_name)
    await message.delete()


@router.message(AddEntertainmentState.waiting_for_entertainment_name)
async def receive_entertainment_name(message: types.Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. """
    await state.update_data(entertainment_name=message.text.strip())
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è:")
    await state.set_state(AddEntertainmentState.waiting_for_entertainment_description)


@router.message(AddEntertainmentState.waiting_for_entertainment_description)
async def receive_entertainment_description(message: types.Message, state: FSMContext):
    """ –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ë–î. """
    state_data = await state.get_data()
    entertainment_name = state_data.get("entertainment_name")
    entertainment_description = message.text.strip()

    success = await DbEntertainment.add_entertainment(name=entertainment_name, description=entertainment_description)
    if success:
        await message.answer(f"‚úÖ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ \"{entertainment_name}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    else:
        await message.answer(f"‚ö†Ô∏è –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    await state.clear()


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ")
async def start_deleting_entertainment(message: types.Message):
    """ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. """
    entertainments = await DbEntertainment.get_all_entertainment()
    if not entertainments:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π.")
        return
    await message.delete()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=ent.name, callback_data=f"delete_entertainment_{ent.id}")]
            for ent in entertainments
        ]
    )

    warning_message = await message.answer(
        "–í–Ω–∏–º–∞–Ω–∏–µ!\n"
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π \"–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è\", –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - —É–¥–∞–ª–∏—Ç –∑–∞–ø–∏—Å—å!\n"
        "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–Ω–µ—Ç —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        reply_markup=keyboard
    )

    await asyncio.sleep(20)
    await warning_message.delete()


@router.callback_query(F.data.startswith("delete_entertainment_"))
async def delete_entertainment(callback_query: types.CallbackQuery):
    """ –£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ. """
    entertainment_id = int(callback_query.data.replace("delete_entertainment_", ""))
    success = await DbEntertainment.delete_entertainment(entertainment_id)

    if success:
        await callback_query.message.answer("‚úÖ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await callback_query.message.answer("‚ö†Ô∏è –†–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    await start_deleting_entertainment(callback_query.message)


@router.message(F.text == "–ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é. """
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=admin_panel_kb)
    await message.delete()
