from aiogram import Router, types, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext

from src.utils.keyboard.user import start_panel_kb, back_to_excursions, back_to_main
from src.database.models import DbEditableText, DbTour, DbAccomodation
from src.states.admin import EditTextState


router = Router()


@router.callback_query(lambda c: c.data == 'about_us')
async def about_us_handler(callback_query: CallbackQuery):
    editable_text = await DbEditableText.get_text('about_us')  
    if not editable_text:  
        return  
    if callback_query.message.text != editable_text.content:  
        await callback_query.message.edit_text(
            editable_text.content,  
            reply_markup=start_panel_kb
        )


@router.callback_query(lambda c: c.data == 'get_discount')
async def get_discount_handler(callback_query: CallbackQuery):
    editable_text = await DbEditableText.get_text('get_discount')  
    if not editable_text:  
        return  
    if callback_query.message.text != editable_text.content:  
        await callback_query.message.edit_text(
            editable_text.content,  
            reply_markup=start_panel_kb
        )


@router.callback_query(lambda c: c.data == 'contacts')
async def contacts_handler(callback_query: CallbackQuery):
    editable_text = await DbEditableText.get_text('contacts')  
    if not editable_text:  
        return  
    if callback_query.message.text != editable_text.content:  
        await callback_query.message.edit_text(
            editable_text.content,  
            reply_markup=start_panel_kb
        )


back_to_accommodation = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="accommodation")]
    ]
)


@router.callback_query(lambda c: c.data == 'accommodation')
async def accommodation_handler(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'accommodation', –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    editable_text = await DbEditableText.get_text('accommodation')
    if not editable_text:
        return

    accommodations = await DbAccomodation.get_all_accomodation()  
    if not accommodations:
        await callback_query.message.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.")
        return
    builder = InlineKeyboardBuilder()
    for accommodation in accommodations:
        builder.row(InlineKeyboardButton(
            text=accommodation.name,
            callback_data=f"view_accommodation_{accommodation.id}"
        ))
    builder.row(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_main"))

    await callback_query.message.edit_text(
        editable_text.content,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("view_accommodation_"))
async def view_accommodation(callback_query: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞."""
    accommodation_id = int(callback_query.data.replace("view_accommodation_", ""))
    accommodation = await DbAccomodation.get_accomodation(accommodation_id)

    if accommodation:
        await callback_query.message.edit_text(
            f"üè† –ù–∞–∑–≤–∞–Ω–∏–µ: {accommodation.name}\n"
            f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {accommodation.description}",
            reply_markup=back_to_accommodation
        )
    else:
        await callback_query.answer("‚ö†Ô∏è –¢–æ—á–∫–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@router.callback_query(lambda c: c.data == 'entertainment')
async def entertainment_handler(callback_query: CallbackQuery):
    editable_text = await DbEditableText.get_text('entertainment')  
    if not editable_text:  
        return  
    if callback_query.message.text != editable_text.content:  
        await callback_query.message.edit_text(
            editable_text.content,  
            reply_markup=start_panel_kb
        )


@router.callback_query(lambda c: c.data == 'local_food')
async def local_cuisine_handler(callback_query: CallbackQuery):
    editable_text = await DbEditableText.get_text('local_food')  
    if not editable_text:  
        return  
    if callback_query.message.text != editable_text.content:  
        await callback_query.message.edit_text(
            editable_text.content,  
            reply_markup=start_panel_kb
        )


@router.callback_query(lambda c: c.data == 'excursions')
async def local_cuisine_handler(callback_query: CallbackQuery):
    editable_text = await DbEditableText.get_text('tour')  
    if not editable_text:  
        return  
    if callback_query.message.text != editable_text.content:  
        await callback_query.message.edit_text(
            editable_text.content,  
            reply_markup=start_panel_kb
        )


@router.callback_query(lambda c: c.data == 'tour')
async def excursions_handler(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'excursions', –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    editable_text = await DbEditableText.get_text('tour')
    if not editable_text:
        return

    tours = await DbTour.get_all_tours()  
    builder = InlineKeyboardBuilder()
    for tour in tours:
        builder.row(InlineKeyboardButton(text=tour.name, callback_data=f"view_tour_{tour.id}"))
    builder.row(InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_main"))
    await callback_query.message.edit_text(
        editable_text.content,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("view_tour_"))
async def view_tour(callback_query: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞."""
    tour_id = int(callback_query.data.replace("view_tour_", ""))
    tour = await DbTour.get_tour(tour_id)

    if tour:
        await callback_query.message.edit_text(
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞: {tour.name}\n"
            f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {tour.description}",
            reply_markup=back_to_excursions
        )
    else:
        await callback_query.answer("‚ö†Ô∏è –¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(lambda c: c.data == 'back_to_main')
async def back_to_main(callback_query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_panel_kb)